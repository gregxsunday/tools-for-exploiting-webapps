from flask import Blueprint, request, render_template, flash, g, session, redirect, url_for, abort, jsonify

import sys
from os import path, listdir
current_dir = path.dirname(__file__)
sys.path.insert(0, path.join(current_dir,'../../../SSRF/HTTP-listener/'))

from http_listener import show_fires, show_targets, create_target
from server import start_listener
from models import Fire, Target
from multiprocessing import Process

mod = Blueprint('ssrf', __name__)

@mod.route('/ssrf/new_target')
def new():
  return (render_template('ssrf/new.html'))

@mod.route('/ssrf/add', methods=['POST'])
def add():
    try:
        name = request.form['name']
    except IndexError:
        return 'No name parameter', 403

    try:
        domain = request.form['domain']
    except IndexError:
        domain = None

    create_target(name, domain)
    return render_template('ssrf/new.html',alert='New target created')

@mod.route('/ssrf/')
def index():
    return (render_template('ssrf/start_listener.html'))

@mod.route('/ssrf/start_listener', methods=['POST'])
def run_listener():
    try:
        port = request.form['port']
    except IndexError:
        return 'Port required', 404

    port = int(port)
    if port in [22, 80, 5000]:
        return 'Invalid port', 403
    
    Process(target=start_listener, args=[port]).start()

    return render_template('ssrf/start_listener.html',alert='Listener started')