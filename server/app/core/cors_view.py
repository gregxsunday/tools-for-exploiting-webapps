from flask import Blueprint, request, render_template, Response, flash, g, session, redirect, url_for, \
                  abort, jsonify

import sys
import validators
from os import path, listdir
current_dir = path.dirname(__file__)
sys.path.insert(0, path.join(current_dir, '../../../CORS/AsynchronousCORSScanner/'))

from core.web_run import web_run
from subprocess import call
from multiprocessing import Process



mod = Blueprint('cors', __name__)

@mod.route('/cors', methods=['GET'])
def index():
  return (render_template('cors/index.html'))


# Change method of calling a scan - sanitazing input and maybe import module?
@mod.route('/run', methods=['POST'])
def run():
    domain = request.form.get('domain')
    log_level = int(request.form.get('log_level'))
    char_mode = int(request.form.get('char_mode'))
    log_path = path.realpath(path.join(current_dir, '../static/logs/'))
    report_path = path.realpath(path.join(current_dir, '../static/cors_reports/'))

    if not validators.domain(domain):
        return Response(status=403)
    if log_level < 0 or log_level > 5:
        log_level = 3
    if char_mode < 0 or char_mode > 3:
        char_mode = 0

    p = Process(target=web_run, args=(domain, log_level, log_path, char_mode, report_path,)).start()

    return Response(status=200)


@mod.route('/cors/log', methods=['GET'])
def logs():
    return render_template("cors/logs.html")


@mod.route('/cors/raw/log', methods=['GET'])
def raw_logs():
    log = path.realpath(path.join(current_dir, '../static/logs/cors.log'))
    try:
        with open(log, 'r') as log_file:
            content = log_file.read()
        return f"<pre>{content}<pre>"
    except FileNotFoundError as err:
        return f"There is no logs, are You sure that the scan is running or was running?"
    