from flask import Blueprint, request, render_template, Response, flash, g, session, redirect, url_for, \
                  abort, jsonify

import sys
import validators
from os import path, listdir
current_dir = path.dirname(__file__)
sys.path.insert(0, path.join(current_dir, '../../../CORS/AsynchronousCORSScanner/'))

from core.web_run import web_run
from subprocess import call
from multiprocessing import Process
from app.database.models import Domain, CorsScan, CorsResult, db



mod = Blueprint('cors', __name__)

@mod.route('/cors', methods=['GET'])
def index():
  return (render_template('cors/index.html'))


# Change method of calling a scan - sanitazing input and maybe import module?
@mod.route('/run', methods=['POST'])
def run():
    domain = request.form.get('domain')
    log_level = int(request.form.get('log_level'))
    char_mode = int(request.form.get('char_mode'))
    log_path = path.realpath(path.join(current_dir, '../static/logs/'))
    report_path = path.realpath(path.join(current_dir, '../static/cors_reports/'))

    if not validators.domain(domain):
        return Response(status=403)
    if log_level < 0 or log_level > 5:
        log_level = 3
    if char_mode < 0 or char_mode > 3:
        char_mode = 0
    try:
        db_domain = Domain.query.filter_by(domain=domain).first()
    except:
        return Response(status=500)
    if db_domain is None:
        db_domain = Domain(domain=domain)
        db.session.add(db_domain)    

    new_scan = CorsScan(scan_status=0, character_mode=char_mode, domain=db_domain)
    Process(target=web_run, args=(domain, log_level, log_path, char_mode, report_path,)).start()
    new_scan.scan_status = 1

    try:
        db.session.commit()
    except:
        return Response(status=500)

    return Response(status=200)


@mod.route('/cors/log', methods=['GET'])
def logs():
    return render_template("cors/logs.html")


@mod.route('/cors/raw/log', methods=['GET'])
def raw_logs():
    log = path.realpath(path.join(current_dir, '../static/logs/cors.log'))
    try:
        with open(log, 'r') as log_file:
            content = log_file.read()
        return f"<pre>{content}<pre>"
    except FileNotFoundError as err:
        return f"There is no logs, are You sure that the scan is running or was running?"
    

@mod.route('/cors/results', methods=['GET'])
def results():
    reports_dir = path.realpath(path.join(current_dir, '../static/cors_reports/'))
    directories = listdir(reports_dir)
    finished_reports = []
    for directory in directories:
        day_reports_dir = path.join(reports_dir, directory)
        reports = listdir(day_reports_dir)
        for report in reports:
            cors_report = path.join('/static/cors_reports/', directory, report)
            finished_reports.append(cors_report)
            # Temporary solution, update to database usage
    return render_template('cors/results.html', reports=finished_reports)

# TODO
@mod.route('/cors/results/<name>', methods=['GET'])
def see_result(name):
    pass


# TODO
@mod.route('/cors/results/<name>', methods=['POST'])
def delete_result(name):
    reports_dir = path.realpath(path.join(current_dir, '../static/cors_reports/'))